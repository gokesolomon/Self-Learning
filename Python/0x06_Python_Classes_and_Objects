#Classes and objects are the two main aspects of object oriented programming.
#A class creates a new type where objects are instances of the class.
#An analogy is that you can have variables of type int which translates to saying that variables that store integers are variables which are instances (objects) of the int class.
#Objects can store data using ordinary variables that belong to the object. 
#Variables that belong to an object or class are referred to as fields
#Objects can also have functionality by using functions that belong to a class. Such functions are called methods of the class.
#Collectively, the fields and methods can be referred to as the attributes of that class.
#Fields are of two types - they can belong to each instance/object of the class or they can belong to the class itself. They are called instance variables and class variables respectively.
#They are called instance variables and class variables respectively.

#The self
#Say you have a class called MyClass and an instance of this class called myobject. 
#When you call a method of this object as myobject.method(arg1, arg2), this is automatically converted by Python into MyClass.method(myobject, arg1, arg2) - this is all the special self is about.

#Classes

#The simplest class possible is shown in the following example (save as oop_simplestclass.py).

class Person:
    pass  # An empty block

p = Person()
print(p)
Output:

$ python oop_simplestclass.py
<__main__.Person instance at 0x10171f518>

#Inheritance
#One of the major benefits of object oriented programming is reuse of code and one of the ways this is achieved is through the inheritance mechanism. 
#Inheritance can be best imagined as implementing a type and subtype relationship between classes.


OBJECT ORIENTED PROGRAMMING OOP
#OOP is an example of a closed access library
#The staff functions like the methods in OOP, which control the access to the data.
#So, the data, - often called attributes, - in such a program can be seen as being hidden and protected by a shell, and it can only be accessed by special functions, usually called methods in the OOP context. Putting the data behind a "shell" is called Encapsulation.
#So a library can be regarded as a class and a book is an instance or an object of this class.


#Attributes
#In computing, an attribute is a specification that defines a property of an object, element, or file. It may also refer to or set the specific value for a given instance of such.


#Data Abstraction, Data Encapsulation, and Information Hiding
Encapsulation is seen as the bundling of data with the methods that operate on that data. Information hiding on the other hand is the principle that some internal information or data is "hidden", so that it can't be accidentally changed. Data encapsulation via methods doesn't necessarily mean that the data is hidden. You might be capable of accessing and seeing the data anyway, but using the methods is recommended. Finally, data abstraction is present, if both data hiding and data encapsulation is used. In other words, data abstraction is the broader term:

Data Abstraction = Data Encapsulation + Data Hiding
Encapsulation is often accomplished by providing two kinds of methods for attributes:
The methods for retrieving or accessing the values of attributes are called getter methods. Getter methods do not change the values of attributes, they just return the values. 
The methods used for changing the values of attributes are called setter methods.

